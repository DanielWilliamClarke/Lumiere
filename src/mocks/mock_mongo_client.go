// Code generated by MockGen. DO NOT EDIT.
// Source: ./mongo/mongo_connection.go

// Package mock_mongo is a generated GoMock package.
package mock_mongo

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIMongoClient is a mock of IMongoClient interface
type MockIMongoClient struct {
	ctrl     *gomock.Controller
	recorder *MockIMongoClientMockRecorder
}

// MockIMongoClientMockRecorder is the mock recorder for MockIMongoClient
type MockIMongoClientMockRecorder struct {
	mock *MockIMongoClient
}

// NewMockIMongoClient creates a new mock instance
func NewMockIMongoClient(ctrl *gomock.Controller) *MockIMongoClient {
	mock := &MockIMongoClient{ctrl: ctrl}
	mock.recorder = &MockIMongoClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIMongoClient) EXPECT() *MockIMongoClientMockRecorder {
	return m.recorder
}

// FindOne mocks base method
func (m *MockIMongoClient) FindOne(ctx context.Context, filter, data interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOne", ctx, filter, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// FindOne indicates an expected call of FindOne
func (mr *MockIMongoClientMockRecorder) FindOne(ctx, filter, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockIMongoClient)(nil).FindOne), ctx, filter, data)
}

// InsertOne mocks base method
func (m *MockIMongoClient) InsertOne(ctx context.Context, data interface{}) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOne", ctx, data)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertOne indicates an expected call of InsertOne
func (mr *MockIMongoClientMockRecorder) InsertOne(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOne", reflect.TypeOf((*MockIMongoClient)(nil).InsertOne), ctx, data)
}
